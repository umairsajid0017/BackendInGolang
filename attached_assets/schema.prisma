generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model account_verification_infos {
    id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id        BigInt    @db.UnsignedBigInt
    live_photo     String?   @db.VarChar(255)
    cnic_front     String?   @db.VarChar(255)
    cnic_back      String?   @db.VarChar(255)
    passport_photo String?   @db.VarChar(255)
    created_at     DateTime  @default(now()) @db.Timestamp(0)
    updated_at     DateTime  @default(now()) @db.Timestamp(0)
    deleted_at     DateTime? @db.Timestamp(0)
    user           users     @relation(fields: [user_id], references: [id])

    @@index([user_id], map: "account_verification_infos_user_id_fkey")
}

model all_payment_methods {
    id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
    payment_method_name   String                  @unique @db.VarChar(255)
    type                  String?                 @db.VarChar(255)
    active                Int                     @default(1)
    created_at            DateTime                @default(now()) @db.Timestamp(0)
    updated_at            DateTime                @default(now()) @db.Timestamp(0)
    deleted_at            DateTime?               @db.Timestamp(0)
    customer_transactions customer_transactions[]
    payments              payments[]
    worker_transactions   worker_transactions[]
}

model bid_responses {
    id             BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
    bid_id         BigInt                    @db.UnsignedBigInt
    worker_id      BigInt                    @db.UnsignedBigInt
    workerType     bid_responses_workerType?
    proposed_price String?                   @db.VarChar(255)
    status         Int?
    is_repeat      Int?                      @default(0)
    is_bid         Int?                      @default(0)
    created_at     DateTime                  @default(now()) @db.Timestamp(0)
    updated_at     DateTime                  @default(now()) @db.Timestamp(0)
    deleted_at     DateTime?                 @db.Timestamp(0)
    bid            bids                      @relation(fields: [bid_id], references: [id])
    worker         users                     @relation(fields: [worker_id], references: [id])

    @@index([bid_id], map: "bid_responses_bid_id_fkey")
    @@index([worker_id], map: "bid_responses_worker_id_fkey")
}

model bids {
    id                  BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
    customer_id         BigInt           @db.UnsignedBigInt
    category_id         BigInt           @db.UnsignedBigInt
    description         String?          @db.Text
    expected_price      String           @db.VarChar(255)
    status              Int              @default(1)
    address             String           @db.VarChar(255)
    images              String?          @db.Text
    audio               String?          @db.VarChar(255)
    bid_canceled_reason String?          @db.VarChar(255)
    expiration_time     DateTime?        @db.Timestamp(0)
    created_at          DateTime         @default(now()) @db.Timestamp(0)
    updated_at          DateTime         @default(now()) @db.Timestamp(0)
    canceled_time       DateTime         @default(now()) @db.Timestamp(0)
    deleted_at          DateTime?        @db.Timestamp(0)
    bid_responses       bid_responses[]
    category            categories       @relation(fields: [category_id], references: [id])
    customer            users            @relation(fields: [customer_id], references: [id])
    bids_declineds      bids_declineds[]
    bookings            bookings[]

    @@index([category_id], map: "bids_category_id_fkey")
    @@index([customer_id], map: "bids_customer_id_fkey")
}

model bids_declineds {
    id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    bid_id         BigInt    @db.UnsignedBigInt
    worker_id      BigInt    @db.UnsignedBigInt
    customer_id    BigInt    @db.UnsignedBigInt
    status         Int?
    declined_price String?   @db.VarChar(255)
    created_at     DateTime  @default(now()) @db.Timestamp(0)
    updated_at     DateTime  @default(now()) @db.Timestamp(0)
    deleted_at     DateTime? @db.Timestamp(0)
    bid            bids      @relation(fields: [bid_id], references: [id])
    customer       users     @relation("customer_fk", fields: [customer_id], references: [id])
    worker         users     @relation("worker_fk", fields: [worker_id], references: [id])

    @@index([bid_id], map: "bids_declineds_bid_id_fkey")
    @@index([customer_id], map: "bids_declineds_customer_id_fkey")
    @@index([worker_id], map: "bids_declineds_worker_id_fkey")
}

model booking_statuses {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    statuses   String    @unique(map: "booking_statuses_statuses_unique") @db.VarChar(255)
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
}

model bookings {
    id                      BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
    booking_number          String?                 @unique
    booking_date            DateTime?               @db.Date
    bid_id                  BigInt?                 @db.UnsignedBigInt
    customer_id             BigInt                  @db.UnsignedBigInt
    worker_id               BigInt                  @db.UnsignedBigInt
    worker_linked_time      DateTime?               @db.DateTime(0)
    service_id              BigInt                  @db.UnsignedBigInt
    status                  Int                     @default(4)
    address                 String                  @db.VarChar(255)
    canceled_reason         String?                 @db.VarChar(255)
    canceled_by_id          BigInt?                 @db.UnsignedBigInt
    images                  String?                 @db.Text
    before_images           String?                 @db.Text
    after_images            String?                 @db.Text
    audio                   String?                 @db.VarChar(255)
    description             String?                 @db.Text
    price                   String?                 @db.VarChar(255)
    is_feedback             Int                     @default(0) @db.TinyInt
    completed_time          DateTime?               @db.DateTime(0)
    canceled_time           DateTime?               @db.DateTime(0)
    created_at              DateTime                @default(now()) @db.Timestamp(0)
    updated_at              DateTime                @default(now()) @db.Timestamp(0)
    deleted_at              DateTime?               @db.Timestamp(0)
    customer_transactionsId BigInt?                 @db.UnsignedBigInt
    bid                     bids?                   @relation(fields: [bid_id], references: [id])
    canceled_by             users?                  @relation("cancled_by_user", fields: [canceled_by_id], references: [id])
    customer                users                   @relation("customer_bookings", fields: [customer_id], references: [id])
    service                 services                @relation("booking_service", fields: [service_id], references: [id])
    worker                  users                   @relation("worker_bookings", fields: [worker_id], references: [id])
    customer_ratings        customer_ratings[]
    customer_transactions   customer_transactions[] @relation("booking_transactions")
    notifications           notifications[]
    payments                payments[]
    ratings                 ratings[]
    worker_ratings          worker_ratings[]
    worker_transactions     worker_transactions[]

    @@index([bid_id], map: "bookings_bid_id_fkey")
    @@index([canceled_by_id], map: "bookings_canceled_by_id_fkey")
    @@index([customer_id], map: "bookings_customer_id_fkey")
    @@index([service_id], map: "bookings_service_id_fkey")
    @@index([worker_id], map: "bookings_worker_id_fkey")
}

model bookmarks {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id    BigInt    @db.UnsignedBigInt
    service_id BigInt    @db.UnsignedBigInt
    status     Int       @default(1)
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
    service    services  @relation(fields: [service_id], references: [id], onDelete: Cascade)
    user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([service_id], map: "bookmarks_service_id_fkey")
    @@index([user_id], map: "bookmarks_user_id_fkey")
}

model categories {
    id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
    title      String     @unique @db.VarChar(255)
    image      String?    @db.VarChar(255)
    status     Int        @default(1) @db.TinyInt
    created_at DateTime   @default(now()) @db.Timestamp(0)
    updated_at DateTime   @default(now()) @db.Timestamp(0)
    deleted_at DateTime?  @db.Timestamp(0)
    bids       bids[]
    services   services[]
    users      users[]
}

model cities {
    id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    is_active    Int       @default(1)
    city_name    String?   @db.VarChar(255)
    state_name   String?   @db.VarChar(255)
    country_name String?   @db.VarChar(255)
    latitude     Decimal?  @db.Decimal(10, 7)
    longitude    Decimal?  @db.Decimal(10, 7)
    created_at   DateTime  @default(now()) @db.Timestamp(0)
    updated_at   DateTime  @default(now()) @db.Timestamp(0)
    deleted_at   DateTime? @db.Timestamp(0)
    active       Int       @default(1)
}

model cnic_infos {
    id                  BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
    user_id             BigInt              @db.UnsignedBigInt
    verification_status verification_status @default(pending)
    cnic_front          String              @db.VarChar(255)
    cnic_back           String              @db.VarChar(255)
    created_at          DateTime            @default(now()) @db.Timestamp(0)
    updated_at          DateTime            @default(now()) @db.Timestamp(0)
    deleted_at          DateTime?           @db.Timestamp(0)
    user                users               @relation(fields: [user_id], references: [id])

    @@index([user_id], map: "cnic_infos_user_id_fkey")
}

model customer_transactions {
    id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
    payment_method_id  BigInt?              @db.UnsignedBigInt
    transaction_number String?              @db.VarChar(255)
    user_id            BigInt               @db.UnsignedBigInt
    booking_id         BigInt?              @db.UnsignedBigInt
    amount             BigInt               @default(0)
    comment            String?              @db.VarChar(255)
    last_updated_at    DateTime             @default(now()) @db.Timestamp(0)
    created_at         DateTime             @default(now()) @db.Timestamp(0)
    updated_at         DateTime             @default(now()) @db.Timestamp(0)
    deleted_at         DateTime?            @db.Timestamp(0)
    booking            bookings?            @relation("booking_transactions", fields: [booking_id], references: [id])
    payment_method     all_payment_methods? @relation(fields: [payment_method_id], references: [id])
    user               users                @relation(fields: [user_id], references: [id])

    @@index([booking_id], map: "customer_transactions_booking_id_fkey")
    @@index([payment_method_id], map: "customer_transactions_payment_method_id_fkey")
    @@index([user_id], map: "customer_transactions_user_id_fkey")
}

model failed_jobs {
    id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(100)
    connection String   @db.Text
    queue      String   @db.Text
    payload    String   @db.Text
    exception  String   @db.Text
    failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model customer_ratings {
    id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    customer_Id BigInt?   @db.UnsignedBigInt
    worker_Id   BigInt?   @db.UnsignedBigInt
    booking_Id  BigInt?   @db.UnsignedBigInt
    service_id  BigInt?   @db.UnsignedBigInt
    rating      Int?
    comment     String?
    created_at  DateTime  @default(now()) @db.Timestamp(0)
    updated_at  DateTime  @default(now()) @db.Timestamp(0)
    deleted_at  DateTime? @db.Timestamp(0)
    booking     bookings? @relation(fields: [booking_Id], references: [id])
    customer    users?    @relation("to_customer", fields: [customer_Id], references: [id])
    service     services? @relation(fields: [service_id], references: [id])
    workers     users?    @relation("by_worker", fields: [worker_Id], references: [id])

    @@index([customer_Id], map: "customer_ratings_customer_Id_foreign")
    @@index([worker_Id], map: "customer_ratings_worker_Id_foreign")
    @@index([booking_Id], map: "customer_ratings_booking_Id_foreign")
    @@index([service_id], map: "customer_ratings_service_id_fkey")
}

model worker_ratings {
    id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    customer_Id BigInt?   @db.UnsignedBigInt
    worker_Id   BigInt?   @db.UnsignedBigInt
    booking_Id  BigInt?   @db.UnsignedBigInt
    service_id  BigInt?   @db.UnsignedBigInt
    rating      Int?
    comment     String?
    created_at  DateTime  @default(now()) @db.Timestamp(0)
    updated_at  DateTime  @default(now()) @db.Timestamp(0)
    deleted_at  DateTime? @db.Timestamp(0)
    booking     bookings? @relation(fields: [booking_Id], references: [id])
    customers   users?    @relation("from_customer", fields: [customer_Id], references: [id])
    workers     users?    @relation("to_worker", fields: [worker_Id], references: [id])

    @@index([customer_Id], map: "worker_ratings_customer_Id_foreign")
    @@index([worker_Id], map: "worker_ratings_worker_Id_foreign")
    @@index([booking_Id], map: "worker_ratings_booking_Id_foreign")
}

model faqs {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    question   String?   @db.Text
    answer     String?   @db.Text
    category   String?   @db.VarChar(100)
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
    active     Int       @default(1)
}

model live_photos {
    id                  BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
    user_id             BigInt               @db.UnsignedBigInt
    live_photo          String               @db.VarChar(255)
    verification_status verification_status? @default(pending)
    created_at          DateTime             @default(now()) @db.Timestamp(0)
    updated_at          DateTime             @default(now()) @db.Timestamp(0)
    deleted_at          DateTime?            @db.Timestamp(0)
    user                users                @relation(fields: [user_id], references: [id])

    @@index([user_id], map: "live_photos_user_id_fkey")
}

model migrations {
    id        Int    @id @default(autoincrement()) @db.UnsignedInt
    migration String @db.VarChar(255)
    batch     Int
}

model model_has_permissions {
    permission_id BigInt @db.UnsignedBigInt
    model_type    String @db.VarChar(100)
    model_id      BigInt @db.UnsignedBigInt

    @@id([permission_id, model_id, model_type])
    @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
    role_id    BigInt @db.UnsignedBigInt
    model_type String @db.VarChar(100)
    model_id   BigInt @db.UnsignedBigInt

    @@id([role_id, model_id, model_type])
    @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model notifications {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id    BigInt    @db.UnsignedBigInt
    sender_id  BigInt?   @db.UnsignedBigInt
    title      String    @db.VarChar(255)
    message    String    @db.VarChar(500)
    type       String    @db.VarChar(255)
    is_read    Int       @default(0) @db.TinyInt
    bid_id     BigInt?   @db.UnsignedBigInt
    booking_id BigInt?   @db.UnsignedBigInt
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
    booking    bookings? @relation(fields: [booking_id], references: [id])
    user       users     @relation(fields: [user_id], references: [id])

    @@index([booking_id], map: "notifications_booking_id_fkey")
    @@index([user_id], map: "notifications_user_id_fkey")
}

model o_t_p_records {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    email      String    @db.VarChar(255)
    otp        String    @db.VarChar(255)
    expires_at DateTime  @db.DateTime(0)
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
}

model passport_photos {
    id                  BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
    user_id             BigInt              @db.UnsignedBigInt
    passport_photo      String              @db.VarChar(255)
    verification_status verification_status @default(pending)
    created_at          DateTime            @default(now()) @db.Timestamp(0)
    updated_at          DateTime            @default(now()) @db.Timestamp(0)
    deleted_at          DateTime?           @db.Timestamp(0)
    user                users               @relation(fields: [user_id], references: [id])

    @@index([user_id], map: "passport_photos_user_id_fkey")
}

model password_reset_tokens {
    email      String    @id @db.VarChar(100)
    token      String    @db.VarChar(255)
    created_at DateTime? @db.Timestamp(0)
}

model payments {
    id                BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
    user_id           BigInt               @db.UnsignedBigInt
    transaction_id    String               @db.VarChar(255)
    action            payments_action      @default(add_to_wallet)
    booking_id        BigInt?              @db.UnsignedBigInt
    amount            BigInt               @default(0)
    payment_method_id BigInt?              @db.UnsignedBigInt
    status            payments_status      @default(pending)
    transaction_date  DateTime             @default(now()) @db.Timestamp(0)
    description       String?              @db.Text
    payload           String?              @db.Text
    created_at        DateTime             @default(now()) @db.Timestamp(0)
    updated_at        DateTime             @default(now()) @db.Timestamp(0)
    deleted_at        DateTime?            @db.Timestamp(0)
    booking           bookings?            @relation(fields: [booking_id], references: [id])
    payment_method    all_payment_methods? @relation(fields: [payment_method_id], references: [id])
    user              users                @relation(fields: [user_id], references: [id])

    @@index([booking_id], map: "payments_booking_id_fkey")
    @@index([payment_method_id], map: "payments_payment_method_id_fkey")
    @@index([user_id], map: "payments_user_id_fkey")
}

model permissions {
    id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
    name                 String                 @db.VarChar(100)
    guard_name           String                 @db.VarChar(100)
    created_at           DateTime               @default(now()) @db.Timestamp(0)
    updated_at           DateTime               @default(now()) @db.Timestamp(0)
    deleted_at           DateTime?              @db.Timestamp(0)
    role_has_permissions role_has_permissions[]

    @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model personal_access_tokens {
    id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    tokenable_type String    @db.VarChar(100)
    tokenable_id   BigInt    @db.UnsignedBigInt
    name           String    @db.VarChar(255)
    token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
    abilities      String?   @db.Text
    last_used_at   DateTime? @db.Timestamp(0)
    expires_at     DateTime? @db.Timestamp(0)
    created_at     DateTime  @default(now()) @db.Timestamp(0)
    updated_at     DateTime  @default(now()) @db.Timestamp(0)
    deleted_at     DateTime? @db.Timestamp(0)

    @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model role_has_permissions {
    permission_id BigInt      @db.UnsignedBigInt
    role_id       BigInt      @db.UnsignedBigInt
    created_at    DateTime    @default(now()) @db.Timestamp(0)
    updated_at    DateTime    @default(now()) @db.Timestamp(0)
    deleted_at    DateTime?   @db.Timestamp(0)
    permission    permissions @relation(fields: [permission_id], references: [id])
    role          roles       @relation(fields: [role_id], references: [id])

    @@id([permission_id, role_id])
    @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
    id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
    name                 String                 @db.VarChar(100)
    guard_name           String?                @db.VarChar(100)
    created_at           DateTime               @default(now()) @db.Timestamp(0)
    updated_at           DateTime               @default(now()) @db.Timestamp(0)
    deleted_at           DateTime?              @db.Timestamp(0)
    role_has_permissions role_has_permissions[]

    @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model saved_payment_methods_table {
    id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id           BigInt    @db.UnsignedBigInt
    payment_method_id BigInt    @db.UnsignedBigInt
    card_number       String?   @db.VarChar(255)
    last_digits       Int
    account_number    String?   @db.VarChar(255)
    cvc               String?   @db.VarChar(255)
    name_on_card      String?   @db.VarChar(255)
    expiry_date       DateTime? @db.Date
    saved             Boolean   @default(true)
    created_at        DateTime  @default(now()) @db.Timestamp(0)
    updated_at        DateTime  @default(now()) @db.Timestamp(0)
    deleted_at        DateTime? @db.Timestamp(0)
    usersId           BigInt    @db.UnsignedBigInt
    users             users     @relation(fields: [user_id], references: [id])

    @@index([payment_method_id], map: "saved_payment_methods_table_payment_method_id_foreign")
    @@index([user_id], map: "saved_payment_methods_table_user_id_foreign")
}

model search_histories {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id    BigInt?   @db.UnsignedBigInt
    keyword    String    @db.VarChar(255)
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
    user       users?    @relation(fields: [user_id], references: [id])

    @@index([user_id], map: "search_histories_user_id_fkey")
}

model services {
    id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
    name                  String                  @db.VarChar(255)
    images                String?                 @db.Text
    description           String?                 @db.Text
    fixed_price           String?                 @db.VarChar(255)
    hourly_price          String?                 @db.VarChar(255)
    address               String?                 @db.Text
    category_id           BigInt                  @db.UnsignedBigInt
    user_id               BigInt                  @db.UnsignedBigInt
    created_at            DateTime                @default(now()) @db.Timestamp(0)
    updated_at            DateTime                @default(now()) @db.Timestamp(0)
    deleted_at            DateTime?               @db.Timestamp(0)
    added_by              services_added_by       @default(worker)
    bookings              bookings[]              @relation("booking_service")
    bookmarks             bookmarks[]
    customer_ratings      customer_ratings[]
    ratings               ratings[]
    category              categories              @relation(fields: [category_id], references: [id])
    user                  users                   @relation("user_services", fields: [user_id], references: [id])
    worker_availabilities worker_availabilities[]

    @@index([category_id], map: "services_category_id_foreign")
    @@index([user_id], map: "services_user_id_foreign")
}

model settings {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    label      String    @unique @db.VarChar(255)
    value      String    @db.VarChar(255)
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
}

model special_offers {
    id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    service_id          BigInt?   @db.UnsignedBigInt
    title               String    @db.VarChar(255)
    description         String?   @db.Text
    image               String?   @db.VarChar(255)
    discount_percentage BigInt    @default(0)
    start_date          DateTime? @db.Date
    end_date            DateTime? @db.Date
    status              Int       @default(1) @db.TinyInt
    created_at          DateTime  @default(now()) @db.Timestamp(0)
    updated_at          DateTime  @default(now()) @db.Timestamp(0)
    deleted_at          DateTime? @db.Timestamp(0)

    @@index([service_id], map: "special_offers_service_id_foreign")
}

model user_categories {
    id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id     BigInt    @db.UnsignedBigInt
    category_id BigInt    @db.UnsignedBigInt
    created_at  DateTime  @default(now()) @db.Timestamp(0)
    updated_at  DateTime  @default(now()) @db.Timestamp(0)
    deleted_at  DateTime? @db.Timestamp(0)

    @@index([category_id], map: "user_categories_category_id_foreign")
    @@index([user_id], map: "user_categories_user_id_foreign")
}

model users {
    id                          BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
    login_type                  login_types                   @default(manual)
    worker_type                 users_worker_type?            @default(freelancer)
    is_online                   Int                           @default(0)
    otp_verify                  Int                           @default(0)
    name                        String                        @db.VarChar(255)
    email                       String                        @db.VarChar(100)
    phone                       String?                       @db.VarChar(100)
    email_verified_at           DateTime?                     @db.Timestamp(0)
    password                    String?                       @db.VarChar(255)
    image                       String?                       @db.VarChar(255)
    dob                         DateTime?                     @db.Date
    active                      Int                           @default(1)
    country                     String?                       @db.VarChar(255)
    gender                      String?                       @db.VarChar(255)
    address                     String?                       @db.Text
    location                    String?                       @db.VarChar(255)
    location_updated_at         DateTime?                     @default(now()) @db.Timestamp(0)
    civil_id_number             String?                       @db.VarChar(255)
    company_id                  BigInt?                       @db.UnsignedBigInt
    role                        String?                       @db.VarChar(50)
    category_id                 BigInt?                       @db.UnsignedBigInt
    status                      Int                           @default(0)
    remember_token              String?                       @db.VarChar(500)
    notification_token          String?                       @db.VarChar(500)
    balance                     BigInt                        @default(0)
    created_at                  DateTime                      @default(now()) @db.Timestamp(0)
    updated_at                  DateTime                      @default(now()) @db.Timestamp(0)
    deleted_at                  DateTime?                     @db.Timestamp(0)
    registration_number         String?                       @db.VarChar(255)
    tax_number                  String?                       @db.VarChar(255)
    is_verify                   Int                           @default(0)
    device_token                String?                       @db.VarChar(255)
    account_verification_infos  account_verification_infos[]
    bid_responses               bid_responses[]
    bids                        bids[]
    customer_bids_declineds     bids_declineds[]              @relation("customer_fk")
    worker_bids_declineds       bids_declineds[]              @relation("worker_fk")
    bookings                    bookings[]                    @relation("cancled_by_user")
    customer_bookings           bookings[]                    @relation("customer_bookings")
    worker_bookings             bookings[]                    @relation("worker_bookings")
    bookmarks                   bookmarks[]
    cnic_infos                  cnic_infos[]
    to_customer                 customer_ratings[]            @relation("to_customer")
    by_worker                   customer_ratings[]            @relation("by_worker")
    customer_transactions       customer_transactions[]
    live_photos                 live_photos[]
    notifications               notifications[]
    passport_photos             passport_photos[]
    payments                    payments[]
    saved_payment_methods_table saved_payment_methods_table[]
    search_histories            search_histories[]
    user_services               services[]                    @relation("user_services")
    category                    categories?                   @relation(fields: [category_id], references: [id])
    worker_availabilities       worker_availabilities[]
    from_customer               worker_ratings[]              @relation("from_customer")
    to_woker                    worker_ratings[]              @relation("to_worker")
    worker_transactions         worker_transactions[]
    workers                     workers[]

    @@unique([email, role], map: "email")
    @@unique([phone, role], map: "phone")
    @@index([category_id], map: "users_category_id_fkey")
}

model worker_availabilities {
    id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id      BigInt    @db.UnsignedBigInt
    service_id   BigInt?   @db.UnsignedBigInt
    date_is      DateTime? @db.Date
    is_available Int?      @default(0) @db.TinyInt
    created_at   DateTime  @default(now()) @db.Timestamp(0)
    updated_at   DateTime  @default(now()) @db.Timestamp(0)
    deleted_at   DateTime? @db.Timestamp(0)
    service      services? @relation(fields: [service_id], references: [id])
    user         users     @relation(fields: [user_id], references: [id], map: "worker_availabilities_user_id_foreign")

    @@index([user_id], map: "worker_availabilities_user_id_foreign")
    @@index([service_id], map: "worker_availabilities_service_id_foreign")
}

model worker_transactions {
    id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
    payment_method_id  BigInt?              @db.UnsignedBigInt
    transaction_number String?              @db.VarChar(255)
    worker_id          BigInt               @db.UnsignedBigInt
    booking_id         BigInt?              @db.UnsignedBigInt
    amount             BigInt               @default(0)
    comment            String?              @db.VarChar(255)
    last_updated_at    DateTime             @default(now()) @db.Timestamp(0)
    created_at         DateTime             @default(now()) @db.Timestamp(0)
    updated_at         DateTime             @default(now()) @db.Timestamp(0)
    deleted_at         DateTime?            @db.Timestamp(0)
    booking            bookings?            @relation(fields: [booking_id], references: [id])
    payment_method     all_payment_methods? @relation(fields: [payment_method_id], references: [id])
    worker             users                @relation(fields: [worker_id], references: [id])

    @@index([payment_method_id], map: "worker_transactions_payment_method_id_foreign")
    @@index([worker_id], map: "worker_transactions_worker_id_foreign")
    @@index([booking_id], map: "worker_transactions_booking_id_fkey")
}

model workers {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    user_id    BigInt    @db.UnsignedBigInt
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
    user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id], map: "workers_user_id_fkey")
}

model ratings {
    id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    booking_id BigInt?   @db.UnsignedBigInt
    service_id BigInt?   @db.UnsignedBigInt
    comment    String?   @db.LongText
    rating     Decimal?  @db.Decimal(8, 2)
    created_at DateTime  @default(now()) @db.Timestamp(0)
    updated_at DateTime  @default(now()) @db.Timestamp(0)
    deleted_at DateTime? @db.Timestamp(0)
    booking    bookings? @relation(fields: [booking_id], references: [id])
    service    services? @relation(fields: [service_id], references: [id])

    @@index([booking_id], map: "feedbacks_booking_id_foreign")
    @@index([service_id], map: "ratings_service_id_fkey")
}

enum login_types {
    manual
    google
    facebook
    apple
    guest
}

enum verification_status {
    verified
    rejected
    pending
}

enum users_worker_type {
    company
    freelancer
}

enum bid_responses_workerType {
    worker
    company
}

enum payments_status {
    pending
    paid
    canceled
}

enum payments_action {
    add_to_wallet
    order_deduction
}

enum services_added_by {
    worker
    company
}
